{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/global.js","webpack:///./src/core/component.js","webpack:///./src/core/entity.js","webpack:///./src/core/game.js","webpack:///./src/core/system.js","webpack:///./src/terra.js"],"names":["g","Function","eval","e","window","module","exports","Component","id","data","entity","Entity","game","components","componentMap","x","y","i","length","attach","component","undefined","push","onAttach","onDetatch","forEach","index","indexOf","splice","Error","Game","width","height","entities","systems","callbacks","onStart","onUpdate","setupCanvas","systemObj","callback","system","requestAnimationFrame","update","bind","time","addEntity","TypeError","System","Object","keys","count","target","j","key","result","find","c","entityId","componentId","getEntity","canvas","document","createElement","setAttribute","body","appendChild","ctx","getContext","getComponent","Terra","global"],"mappings":"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","file":"terra.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/terra.js\");\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export class Component {\n    constructor(id, data) {\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * @type {Object}\n         */\n        this.data = data;\n\n        /**\n         * @type {Entity}\n         */\n        this.entity = null;\n    }\n\n    /**\n     * This is called when it is attached to an Entity\n     */\n    onAttach() {}\n\n    /**\n     * This is called when it is detatched from an Entity\n     */\n    onDetatch() {}\n\n}","export class Entity {\n    constructor(id, game, components) {\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * @type {Object}\n         */\n        this.componentMap = {};\n\n        /**\n         * @type {Game}\n         */\n        this.game = game;\n\n        /**\n         * @type {number}\n         */\n        this.x = 0;\n\n        /**\n         * @type {number}\n         */\n        this.y = 0;\n        \n        if(components) {\n            for(let i=0; i<components.length; i++) {\n                this.attach(components[i]);\n            }\n        }\n    }\n\n    /**\n     * Attach a Component to this Entity\n     * @param {Component} component\n     */\n    attach(component) {\n        if(this.componentMap[component.id] === undefined) {\n            this.componentMap[component.id] = component;\n\n            if(this.game.components[component.id] === undefined) {\n                this.game.components[component.id] = [];\n            }\n            this.game.components[component.id].push(component);\n            component.entity = this;\n            component.onAttach();\n            \n        } else {\n            throw(`There is already a component with the ID '${component.id}'`);\n        }\n    }\n\n    /**\n     * Detatch a component from entity\n     * @param {string} ID of component\n     */\n    detatch(id) {\n        this.componentMap[id].onDetatch(); // First call onDetatch before removing it\n        delete this.componentMap[id]; // Remove from Entity map\n\n        // Remove from Game global component list\n        this.game.components[id].forEach((component) => {\n            if(component.entity.id == this.id) {\n                let index = this.game.components[id].indexOf(component);\n                if(index > -1) {\n                    this.game.components[id].splice(index, 1);\n                }\n            }\n        });\n    }\n\n    /**\n     * Find a specific Component from this Entity\n     * @param {string} id - ID of the component\n     * @return {Component}\n     */\n    find(id) {\n        if(this.componentMap[id] !== undefined) {\n            return this.componentMap[id];\n        }\n        throw new Error(`Cannot find Component '${id}' on Entity '${this.id}'`);\n    }\n\n}","import { Entity } from './entity.js';\nimport { System } from './system.js';\n\nexport class Game {\n\n    /**\n     * The Game class takes in dimensions of the game screen\n     * @param {number} width width of game screen\n     * @param {number} height height of game screen\n     */\n    constructor(width, height) {\n        /**\n         * @type {number}\n         */\n        this.width = width;\n\n        /**\n         * @type {number}\n         */\n        this.height = height;\n\n        /**\n         * @type {Object}\n         */\n        this.entities = {};\n\n        /**\n         * @type {Object}\n         */\n        this.components = {};\n\n        /**\n         * @type {Object}\n         */\n        this.systems = {};\n\n        /**\n         * @type {Object}\n         */\n        this.callbacks = {};\n\n        /**\n         * @type {Array}\n         */\n        this.callbacks.onStart = [];\n\n        /**\n         * @type {Array}\n         */\n        this.callbacks.onUpdate = [];\n    }\n\n    /**\n     * The game start function. Use onStart() callback to hook in here\n     */\n    start() {\n        // Renderer Setup\n        this.setupCanvas();\n\n        this.onStart();\n\n        // Run start callbacks\n        this.callbacks.onStart.forEach((systemObj) => {\n            systemObj.callback(systemObj.system);\n        });\n\n        // Start game loop\n        window.requestAnimationFrame(this.update.bind(this));\n    }\n\n    /**\n     * The game update function. Use onUpdate() callback to hook into here\n     */\n    update(time) {\n        this.onUpdate(time);\n\n        this.callbacks.onUpdate.forEach((systemObj) => {\n            systemObj.callback(systemObj.system, time);\n        });\n        \n        window.requestAnimationFrame(this.update.bind(this));\n    }\n\n    /**\n     * The game update that happens every game frame/tick.\n     */\n    onUpdate(time) {\n        // Override\n    }\n\n    /**\n     * The intialization function for the game.\n     */\n    onStart() {\n        // Override\n    }\n\n    /**\n     * Create an array of entities & add them to the game\n     * @param {Entity[]} entities An array of entities\n     */\n    createEntities(entities) {\n        for(let i=0; i<entities.length; i++) {\n            if(entities[i] instanceof Entity) {\n                this.addEntity(entities[i]);\n            } else {\n                throw new TypeError(`Trying to add an entity which is not of type 'Entity'`);\n            }\n        }\n    }\n\n    /**\n     * Create & add a single entity\n     * @param {Entity} entity\n     */\n    addEntity(entity) {\n        if(entity instanceof Entity) {\n            this.entities[entity.id] = entity;\n            entity.game = this;\n        } else {\n            throw new TypeError(`Trying to add an entity which is not of type 'Entity'`);\n        }\n        \n    }\n\n    /**\n     * Register a system in the game instance\n     * @param {System} system\n     * @return {System}\n     */\n    addSystem(system) {\n        if(this.systems[system.id] === undefined && system instanceof System) {\n            system.game = this;\n            this.systems[system.id] = system;\n            this.callbacks.onStart.push({system: system, callback: system.onStart});\n            this.callbacks.onUpdate.push({system: system, callback: system.onUpdate});\n            return system;\n        } else {\n            throw(new TypeError(`Trying to add system which is not type of 'System'`));\n        }\n    }\n\n    /**\n     * Retrieve an entity\n     * @param {string} id - The ID of the entity\n     * @return {Entity} Returns the matching entity\n     */\n    getEntity(id) {\n        if(this.entities[id] !== undefined) {\n            return this.entities[id];\n        }\n    }\n\n    /**\n     * Retrieves all entities that have all provided components.\n     * @param {string[]} components - A list of component ID's to match against\n     * @return {Entity[]}\n     */\n    getEntitiesWith(components) {\n        let entities = [];\n\n        for(let i=0; i<Object.keys(this.entities).length; i++) {\n            let entity = this.entities[Object.keys(this.entities)[i]];\n            let count = 0;\n            let target = components.length;\n            \n            for(let j=0; j<Object.keys(entity.componentMap).length; j++) {\n                let key = Object.keys(entity.componentMap)[j];\n                let result = components.find(c => c == entity.componentMap[key].id);\n                if(result) count++\n            }\n\n            if(count == target) {\n                entities.push(entity);\n            }\n        }\n        return entities;\n    }\n\n    /**\n     * Retrive a system in the game\n     * @param {string} id - The ID of the system\n     */\n    getSystem(id) {\n        return this.systems[id];\n    }\n\n    /**\n     * Retrieves a component from a specific entity\n     * @param {string} entityId - The entity to retrieve the component from\n     * @param {string} componentId - The component ID\n     * @return {Component}\n     */\n    getComponentFromEntity(entityId, componentId) {\n        return this.getEntity(entityId).find(componentId);\n    }\n\n    setupCanvas() {\n        let canvas = document.createElement('canvas');\n        canvas.setAttribute('width', `${this.width}px`);\n        canvas.setAttribute('height', `${this.height}px`);\n        document.body.appendChild(canvas);\n        Game.ctx = canvas.getContext('2d');\n    }\n}","export class System {\n    constructor(id, onStart, onUpdate) {\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * @type {Game}\n         */\n        this.game = null;\n\n        /**\n         * @type {function}\n         */\n\n        this.onStart = onStart;\n        this.onUpdate = onUpdate;\n    }\n\n    /**\n     * Retrieves an Entity from the Game\n     * @param {string} id - ID of the entity\n     * @return {Entity}\n     */\n    getEntity(id) {\n        if(this.game !== null) {\n            return this.game.getEntity(id);\n        }\n    }\n\n    /**\n     * Retrieves a Components from a specific Entity\n     * @param {string} entityId - The ID of the Entity\n     * @param {string} componentId - The ID of the Component\n     */\n    getComponentFromEntity(entityId, componentId) {\n        if(this.game) {\n            return this.game.getEntity(entityId).getComponent(componentId);\n        }\n    }\n}","import { Game } from './core/game.js';\nimport { Entity } from './core/entity.js';\nimport { Component } from './core/component.js';\nimport { System } from './core/system.js';\n\n/**\n * This is the global class for accessing the framework from your document\n */\nclass Terra {\n    constructor() {\n        this.Game = Game;\n\n        // Base Classes\n        this.Entity = Entity;\n        this.Component = Component;\n        this.System = System;\n    }\n}\n\nglobal.Terra = new Terra();"],"sourceRoot":""}
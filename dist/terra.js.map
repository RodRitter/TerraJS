{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/core/system.js","webpack:///./src/core/entity.js","webpack:///./src/core/component.js","webpack:///./src/core/game.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/terra.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","System","id","onStart","onUpdate","_classCallCheck","this","game","getEntity","entityId","componentId","getComponent","Entity","components","componentMap","length","attachComponent","component","undefined","push","onAttach","Component","data","entity","_entity","_system","Game","width","height","entities","systems","callbacks","forEach","systemObj","callback","system","window","requestAnimationFrame","update","bind","time","TypeError","addEntity","_this","_loop","keys","count","target","_loop2","j","key","find","g","Function","eval","e","_typeof","_game","_component","global","Terra"],"mappings":"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","file":"terra.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","export class System {\n    constructor(id, onStart, onUpdate) {\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * @type {Game}\n         */\n        this.game = null;\n\n        /**\n         * @type {function}\n         */\n\n        this.onStart = onStart;\n        this.onUpdate = onUpdate;\n    }\n\n    /**\n     * Retrieves an Entity from the Game\n     * @param {string} id - ID of the entity\n     * @return {Entity}\n     */\n    getEntity(id) {\n        if(this.game !== null) {\n            return this.game.getEntity(id);\n        }\n    }\n\n    /**\n     * Retrieves a Components from a specific Entity\n     * @param {string} entityId - The ID of the Entity\n     * @param {string} componentId - The ID of the Component\n     */\n    getComponentFromEntity(entityId, componentId) {\n        if(this.game) {\n            return this.game.getEntity(entityId).getComponent(componentId);\n        }\n    }\n}","export class Entity {\n    constructor(id, game, components) {\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * @type {Object}\n         */\n        this.componentMap = {};\n\n        /**\n         * @type {Game}\n         */\n        this.game = game;\n        \n        if(components) {\n            for(let i=0; i<components.length; i++) {\n                this.attachComponent(components[i]);\n            }\n        }\n    }\n\n    /**\n     * Attach a Component to this Entity\n     * @param {Component} component\n     */\n    attachComponent(component) {\n        if(this.componentMap[component.id] === undefined) {\n            this.componentMap[component.id] = component;\n\n            if(this.game.components[component.id] === undefined) {\n                this.game.components[component.id] = [];\n            } \n            this.game.components[component.id].push(component);\n            component.onAttach();\n            \n        } else {\n            throw(`There is already a component with the ID '${component.id}'`);\n        }\n    }\n\n    /**\n     * Get a specific Component from this Entity\n     * @param {string} id - ID of the component\n     * @return {Component}\n     */\n    getComponent(id) {\n        if(this.componentMap[id] !== undefined) {\n            return this.componentMap[id];\n        }\n        throw(`Cannot find Component '${id}' on Entity '${this.id}'`);\n    }\n\n}","export class Component {\n    constructor(id, data) {\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * @type {Object}\n         */\n        this.data = data;\n\n        /**\n         * @type {Entity}\n         */\n        this.entity = null;\n    }\n\n    /**\n     * This is called when it is attached to an Entity\n     */\n    onAttach() {\n        \n    }\n}","import { Entity } from './entity.js';\nimport { System } from './system.js';\n\nexport class Game {\n\n    /**\n     * The Game class takes in dimensions of the game screen\n     * @param {number} width width of game screen\n     * @param {number} height height of game screen\n     */\n    constructor(width, height) {\n        /**\n         * @type {number}\n         */\n        this.width = width;\n\n        /**\n         * @type {number}\n         */\n        this.height = height;\n\n        /**\n         * @type {Object}\n         */\n        this.entities = {};\n\n        /**\n         * @type {Object}\n         */\n        this.components = {};\n\n        /**\n         * @type {Object}\n         */\n        this.systems = {};\n\n        /**\n         * @type {Object}\n         */\n        this.callbacks = {};\n\n        /**\n         * @type {Array}\n         */\n        this.callbacks.onStart = [];\n\n        /**\n         * @type {Array}\n         */\n        this.callbacks.onUpdate = [];\n    }\n\n    /**\n     * The game start function. Use onStart() callback to hook in here\n     */\n    start() {\n        this.onStart();\n\n        // Run start callbacks\n        this.callbacks.onStart.forEach((systemObj) => {\n            systemObj.callback(systemObj.system);\n        });\n\n        // Start game loop\n        window.requestAnimationFrame(this.update.bind(this));\n    }\n\n    /**\n     * The game update function. Use onUpdate() callback to hook into here\n     */\n    update(time) {\n        this.onUpdate(time);\n\n        this.callbacks.onUpdate.forEach((systemObj) => {\n            systemObj.callback(systemObj.system, time);\n        });\n        \n        window.requestAnimationFrame(this.update.bind(this));\n    }\n\n    /**\n     * The game update that happens every game frame/tick.\n     */\n    onUpdate(time) {\n        // Override\n    }\n\n    /**\n     * The intialization function for the game.\n     */\n    onStart() {\n        // Override\n    }\n\n    /**\n     * Create an array of entities & add them to the game\n     * @param {Entity[]} entities An array of entities\n     */\n    createEntities(entities) {\n        for(let i=0; i<entities.length; i++) {\n            if(entities[i] instanceof Entity) {\n                this.addEntity(entities[i]);\n            } else {\n                throw new TypeError(`Trying to add an entity which is not of type 'Entity'`);\n            }\n        }\n    }\n\n    /**\n     * Create & add a single entity\n     * @param {Entity} entity\n     */\n    addEntity(entity) {\n        this.entities[entity.id] = entity;\n        entity.game = this;\n    }\n\n    /**\n     * Register a system in the game instance\n     * @param {System} system\n     * @return {System}\n     */\n    addSystem(system) {\n        if(this.systems[system.id] === undefined && system instanceof System) {\n            system.game = this;\n            this.systems[system.id] = system;\n            this.callbacks.onStart.push({system: system, callback: system.onStart});\n            this.callbacks.onUpdate.push({system: system, callback: system.onUpdate});\n            return system;\n        } else {\n            throw(new TypeError(`Trying to add system which is not type of 'System'`));\n        }\n    }\n\n    /**\n     * Retrieve an entity\n     * @param {string} id - The ID of the entity\n     * @return {Entity} Returns the matching entity\n     */\n    getEntity(id) {\n        if(this.entities[id] !== undefined) {\n            return this.entities[id];\n        }\n        throw(`Cannot find Entity with id '${id}'`);\n    }\n\n    /**\n     * Retrieves all entities that have all provided components.\n     * @param {string[]} components - A list of component ID's to match against\n     * @return {Entity[]}\n     */\n    getEntitiesWith(components) {\n        let entities = [];\n\n        for(let i=0; i<Object.keys(this.entities).length; i++) {\n            let entity = this.entities[Object.keys(this.entities)[i]];\n            let count = 0;\n            let target = components.length;\n            \n            for(let j=0; j<Object.keys(entity.componentMap).length; j++) {\n                let key = Object.keys(entity.componentMap)[j];\n                let result = components.find(c => c == entity.componentMap[key].id);\n                if(result) count++\n            }\n\n            if(count == target) {\n                entities.push(entity);\n            }\n        }\n        return entities;\n    }\n\n    /**\n     * Retrive a system in the game\n     * @param {string} id - The ID of the system\n     */\n    getSystem(id) {\n        return this.systems[id];\n    }\n\n    /**\n     * Retrieves a component from a specific entity\n     * @param {string} entityId - The entity to retrieve the component from\n     * @param {string} componentId - The component ID\n     * @return {Component}\n     */\n    getComponentFromEntity(entityId, componentId) {\n        return this.getEntity(entityId).getComponent(componentId);\n    }\n}","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","import { Game } from './core/game.js';\nimport { Entity } from './core/entity.js';\nimport { Component } from './core/component.js';\nimport { System } from './core/system.js';\n\n/**\n * This is the global class for accessing the framework from your document\n */\nclass Terra {\n    constructor() {\n        this.Game = Game;\n\n        // Base Classes\n        this.Entity = Entity;\n        this.Component = Component;\n        this.System = System;\n    }\n}\n\nglobal.Terra = new Terra();"],"sourceRoot":""}